security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER]

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: false
            provider: app_user_provider
            user_checker: App\Security\UserChecker
            form_login:
                login_path: public_login
                check_path: public_login
                enable_csrf: true
                default_target_path: public_landing
                use_referer: true
            logout:
                path: public_logout
                target: public_landing
            remember_me:
                secret: "%kernel.secret%"
                lifetime: 604800 # 1 week in seconds
            stateless: false

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Public subdomain - allow access to login and security routes for everyone
        # These routes are accessible to both authenticated and unauthenticated users
        # Note: We don't use PUBLIC_ACCESS here because it bypasses the firewall
        # Instead, we let these routes go through the firewall but don't require authentication
        - { path: ^/login, roles: [] }
        - { path: ^/reset-password, roles: [] }
        - { path: ^/invitation, roles: [] }
        - { path: ^/$, roles: [] }

        # Admin routes on www subdomain
        - { path: ^/users, roles: ROLE_ADMIN }
        - { path: ^/clubs, roles: ROLE_ADMIN }
        - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/$, roles: ROLE_USER }

        # Club subdomain - authenticated users with club access
        - { path: ^/, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
